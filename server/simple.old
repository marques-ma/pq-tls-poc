package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
)

// pqAlgos is a list of post-quantum algorithms to test
var pqAlgos = []string{
	"kyber512", "p256_kyber512", // Add other PQ algorithms as needed
}

// runServer starts the OpenSSL s_server
func runServer(cert, key, cert2, key2 string) *exec.Cmd {
	cmd := exec.Command(
		"openssl", "s_server",
		"-cert", cert,
		"-key", key,
		"-cert2", cert2,
		"-key2", key2,
		"-www", "-tls1_3", // Enable TLS 1.3
	)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	if err := cmd.Start(); err != nil {
		log.Fatalf("Failed to start OpenSSL server: %v", err)
	}

	log.Println("Server started with PQ and classical certificates")
	return cmd
}

// runClient tests the TLS connection using OpenSSL s_client with a specified PQ algorithm
func runClient(algorithm, cert, key string) error {
	cmd := exec.Command(
		"openssl", "s_client",
		"-connect", "localhost:4433",
		"-cert", cert,
		"-key", key,
		"-groups", algorithm, // Specify PQ algorithm group
		"-tls1_3", "-msg",
	)

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to run s_client: %v: %s", err, stderr.String())
	}

	output := stdout.String()
	log.Println("Client output:", output)

	// Check for successful connection
	if !strings.Contains(output, "CONNECTED") {
		return fmt.Errorf("TLS connection failed")
	}

	log.Printf("Successfully connected with algorithm: %s", algorithm)
	return nil
}

func main() {
	// Start the server
	serverCmd := runServer("ecdsa_server.crt", "ecdsa_key.pem", "pq_server.crt", "pq_key.pem")

	// Run client for each PQ algorithm
	for _, algo := range pqAlgos {
		log.Printf("Testing with PQ algorithm: %s", algo)
		if err := runClient(algo, "../client/pq_client.crt", "../client/pq_key.pem"); err != nil {
			log.Fatalf("Test failed for algorithm %s: %v", algo, err)
		}
	}

	// Clean up the server process after tests
	if err := serverCmd.Process.Kill(); err != nil {
		log.Fatalf("Failed to stop server: %v", err)
	}
}
